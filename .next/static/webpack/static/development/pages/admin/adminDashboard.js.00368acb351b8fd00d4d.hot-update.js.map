{"version":3,"file":"static/webpack/static/development/pages/admin/adminDashboard.js.00368acb351b8fd00d4d.hot-update.js","sources":["webpack:///./components/admin/manageEnquiries.js"],"sourcesContent":["import React, { Component } from \"react\";\nimport axios from \"axios\";\nimport {\n  Row,\n  Col,\n  Card,\n  Drawer,\n  List,\n  Avatar,\n  Button,\n  Skeleton,\n  Modal,\n  Table,\n  Popover,\n  Icon,\n  Form,\n  Input,\n  Radio,\n  DatePicker,\n  InputNumber,\n  Checkbox,\n  Upload\n} from \"antd\";\nimport moment from \"moment\";\nimport Link from \"next/link\";\n\nimport reqwest from \"reqwest\";\nimport { withRouter } from \"next/router\";\n\nimport { HomeConsumer, HomeContext } from \"../provider/homeProvider\";\nconst { Meta } = Card;\n\nclass ManageEnquiriesAdmin extends Component {\n  componentDidMount() {}\n  state = {\n    drawerVisible: false,\n    currentId: \"\",\n    currentEnquiry: {},\n    initLoading: true,\n    loading: false,\n    enquiries: [],\n    list: [],\n    count: 0,\n    junk: \"\",\n    inputGuests: 0,\n    modalCategory: {\n      name: \"\",\n      eventType: [],\n      servicesRequired: [],\n      budget: [{ from: 0, to: 0, order: 0, leadPrice: 0 }]\n    },\n    categories: [],\n    locations: [],\n    selectedLocation: \"\",\n    enquiryMode: \"create\"\n  };\n  static contextType = HomeContext;\n  componentWillMount() {\n    axios\n      .get(\"/api/admin/allCategories\")\n      .then(categories => categories.data)\n      .then(category =>\n        this.setState({\n          categories: category,\n          modalCategory: category[0]\n        })\n      );\n\n    axios\n      .get(\"/api/admin/getLocations\")\n      .then(locations => locations.data)\n      .then(locations =>\n        this.setState({\n          locations: locations[0].locations,\n          selectedLocation: locations[0].locations[0]\n        })\n      );\n  }\n  componentDidMount() {\n    this.getData(res => {\n      this.setState({\n        initLoading: false,\n        enquiries: res,\n        list: res,\n        count: this.state.count + 2\n      });\n    });\n\n    axios\n      .get(\"/api/enquiries/currentEnquiry/\" + this.state.currentEnquiry._id)\n      .then(enquiry =>\n        this.setState({ currentEnquiry: enquiry.data, drawerVisible: true })\n      );\n  }\n\n  getData = callback => {\n    axios\n      .get(`/api/enquiries/allEnquiries/2/${this.state.count}`)\n      .then(res => callback(res.data));\n  };\n\n  onLoadMore = () => {\n    this.setState({\n      loading: true,\n      count: this.state.count + 2\n    });\n    this.getData(res => {\n      const enquiries = this.state.enquiries.concat(res);\n      this.setState(\n        {\n          enquiries,\n          loading: false\n        },\n        () => {\n          // Resetting window's offsetTop so as to display react-virtualized demo underfloor.\n          // In real scene, you can using public method of react-virtualized:\n          // https://stackoverflow.com/questions/46700726/how-to-use-public-method-updateposition-of-react-virtualized\n          window.dispatchEvent(new Event(\"resize\"));\n        }\n      );\n    });\n  };\n  openEnquiry = id => {\n    axios.get(\"/api/enquiries/currentEnquiry/\" + id).then(enquiry => {\n      this.setState({\n        currentEnquiry: enquiry.data,\n        selectedLocation: enquiry.data.city,\n        enquiryMode: \"update\"\n      }),\n        this.props.form.setFieldsValue({\n          category: enquiry.data.category,\n          serviceFor: enquiry.data.serviceFor,\n          eventDate: moment(enquiry.data.eventDate),\n          noOfGuests: enquiry.data.noOfGuests,\n          city: enquiry.data.city,\n          locality: enquiry.data.locality,\n          budget: enquiry.data.budgetRange.option,\n          otherInfo: enquiry.data.otherInfo,\n          isVerified: enquiry.data.isVerified,\n          source: enquiry.data.source,\n          celebratonComment: enquiry.data.celebratonComment\n        }),\n        this.state.categories.map(category =>\n          category.name === enquiry.data.category\n            ? this.setState({ modalCategory: category })\n            : null\n        );\n    });\n  };\n  submitEnquiry = e => {\n    e.preventDefault();\n\n    this.props.form.validateFieldsAndScroll((err, values) => {\n      if (!err) {\n        let request = {\n          enquiry: values,\n          category: this.state.modalCategory,\n          id: this.state.currentEnquiry._id,\n          mode: this.state.enquiryMode\n        };\n        axios.post(\"/api/admin/adminManageEnquiry\", request).then(enq => {\n          const index = this.state.enquiries.findIndex(\n            x => x._id === this.state.currentEnquiry._id\n          );\n\n          (this.state.enquiries[index] = enq.data),\n            this.setState({ currentEnquiry: enq.data });\n        });\n      }\n    });\n  };\n\n  disabledDate = current => {\n    // Can not select days before today and today\n    return current < moment().startOf(\"day\");\n  };\n  onChangeGuests = value => {\n    this.setState({\n      inputGuests: value\n    });\n  };\n  normFile = e => {\n    console.log(\"Upload event:\", e);\n    if (Array.isArray(e)) {\n      return e;\n    }\n    return e && e.fileList;\n  };\n  selectCategory = category => {\n    this.setState({ modalCategory: category });\n  };\n  render() {\n    const { selectLocationInModal } = this.context;\n    const {\n      initLoading,\n      loading,\n      list,\n      enquiries,\n      modalCategory,\n      locations,\n      selectedLocation,\n      categories,\n      currentEnquiry\n    } = this.state;\n    const loadMore =\n      !initLoading && !loading ? (\n        <div\n          style={{\n            textAlign: \"center\",\n            marginTop: 12,\n            height: 32,\n            lineHeight: \"32px\"\n          }}\n        >\n          <Button onClick={this.onLoadMore}>Load more</Button>\n        </div>\n      ) : null;\n\n    const { router } = this.props;\n\n    typeof currentEnquiry.budgetRange !== \"undefined\"\n      ? null\n      : (currentEnquiry.budgetRange = { from: 0, to: 0 });\n    typeof currentEnquiry.user !== \"undefined\"\n      ? null\n      : (currentEnquiry.user = { name: \"\", email: \"\", mobile: \"\" });\n\n    const { getFieldDecorator } = this.props.form;\n    const formItemLayoutHorizontal = {\n      labelCol: { span: 6 },\n      wrapperCol: { span: 16 }\n    };\n    const tailformItemLayout = {\n      wrapperCol: {\n        xs: {\n          span: 24,\n          offset: 0\n        }\n      }\n    };\n    const formItemLayoutVertical = {\n      wrapperCol: { span: 22, offset: 1 }\n    };\n\n    const dateFormat = \"DD MMM YYYY\";\n    const { inputGuests } = this.state;\n    const { TextArea } = Input;\n    let Layout, layoutVariable;\n    if (typeof screen !== \"undefined\") {\n      Layout =\n        screen.width <= \"850\"\n          ? formItemLayoutVertical\n          : formItemLayoutHorizontal;\n      layoutVariable = screen.width <= \"850\" ? \"vertical\" : \"horizontal\";\n    } else {\n      Layout = formItemLayoutHorizontal;\n      layoutVariable = \"horizontal\";\n    }\n\n    return (\n      <React.Fragment>\n        <h1 style={{ textAlign: \"center\" }}>Create or Update Enquiries</h1>\n        <Form layout={layoutVariable} onSubmit={this.submitEnquiry}>\n          <Form.Item label=\"Select Category\" {...Layout}>\n            {getFieldDecorator(\"category\", {\n              initialValue: modalCategory.name\n            })(\n              <Radio.Group buttonStyle=\"solid\">\n                {categories.map(category => (\n                  <Radio.Button\n                    key={category._id}\n                    value={category.name}\n                    onClick={() => this.selectCategory(category)}\n                    checked=\"true\"\n                  >\n                    {category.name}\n                  </Radio.Button>\n                ))}\n              </Radio.Group>\n            )}\n          </Form.Item>\n          <Form.Item\n            label={modalCategory.name.concat(\" required for?\")}\n            {...Layout}\n          >\n            {getFieldDecorator(\"serviceFor\", {\n              initialValue: modalCategory.eventType[0]\n            })(\n              <Radio.Group\n                onChange={this.handleFormLayoutChange}\n                buttonStyle=\"\"\n              >\n                {modalCategory.eventType.map(eventType => (\n                  <Radio key={eventType} value={eventType}>\n                    {eventType}\n                  </Radio>\n                ))}\n              </Radio.Group>\n            )}\n          </Form.Item>\n          <Form.Item {...Layout} label=\"Event Date\">\n            {getFieldDecorator(\"eventDate\", {})(\n              <DatePicker\n                format={dateFormat}\n                disabledDate={this.disabledDate}\n              />\n            )}\n          </Form.Item>\n          <Form.Item {...Layout} label=\"No of Guests\">\n            {getFieldDecorator(\"noOfGuests\", {\n              value:\n                typeof this.state.inputGuests === \"number\"\n                  ? this.state.inputGuests\n                  : 0\n            })(<InputNumber onChange={this.onChangeGuests} />)}\n          </Form.Item>\n          <Form.Item {...Layout} label=\"Services required\">\n            {getFieldDecorator(\"servicesRequired\", {\n              initialValue: currentEnquiry.servicesRequired\n            })(\n              <Checkbox.Group style={{ width: \"100%\" }}>\n                <Row>\n                  {modalCategory.servicesRequired.map(servicesRequired => (\n                    <Col\n                      lg={{ span: 6 }}\n                      md={{ span: 8 }}\n                      sm={{ span: 24 }}\n                      key={servicesRequired}\n                    >\n                      <Checkbox value={servicesRequired}>\n                        {servicesRequired}\n                      </Checkbox>\n                    </Col>\n                  ))}\n                </Row>\n              </Checkbox.Group>\n            )}\n          </Form.Item>\n          <Form.Item label=\"In which city?\" {...Layout}>\n            {getFieldDecorator(\"city\", {\n              initialValue: selectedLocation\n            })(\n              <Radio.Group onChange={selectLocationInModal} buttonStyle=\"solid\">\n                {locations.map(location => (\n                  <Radio.Button key={location} value={location}>\n                    {location}\n                  </Radio.Button>\n                ))}\n              </Radio.Group>\n            )}\n          </Form.Item>\n          <Form.Item\n            {...Layout}\n            label={\"Area of event (in \" + selectedLocation + \")\"}\n          >\n            {getFieldDecorator(\"locality\", {})(<Input />)}\n          </Form.Item>\n          <Form.Item label=\"What is your budget?\" {...Layout}>\n            {getFieldDecorator(\"budget\")(\n              <Radio.Group\n                onChange={this.handleFormLayoutChange}\n                buttonStyle=\"\"\n              >\n                {modalCategory.budget.map(budget => (\n                  <Radio key={budget.from} value={budget.option}>\n                    {budget.to !== 0\n                      ? \"Rs.\" +\n                        budget.from\n                          .toString()\n                          .replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\") +\n                        \" - Rs.\" +\n                        budget.to\n                          .toString()\n                          .replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\")\n                      : \"Above Rs.\" +\n                        budget.from\n                          .toString()\n                          .replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\")}\n                  </Radio>\n                ))}\n              </Radio.Group>\n            )}\n          </Form.Item>\n          <Form.Item\n            {...Layout}\n            label=\"Sample Image (if any)\"\n            extra=\"Our vendors will get a fair idea about the requirements\"\n          >\n            {getFieldDecorator(\"sampleImages\", {\n              valuePropName: \"fileList\",\n              getValueFromEvent: this.normFile\n            })(\n              <Upload name=\"logo\" listType=\"picture\" multiple={true}>\n                <Button>\n                  <Icon type=\"upload\" /> Click to upload\n                </Button>\n              </Upload>\n            )}\n          </Form.Item>\n          <Form.Item {...Layout} label=\"Any other info?\">\n            {getFieldDecorator(\"otherInfo\", {})(\n              <TextArea\n                placeholder=\"Any other details apart from mentioned above?\"\n                autosize\n              />\n            )}\n            <div style={{ margin: \"24px 0\" }} />\n          </Form.Item>\n          <Form.Item {...Layout} label=\"User Name\">\n            {getFieldDecorator(\"name\", {\n              initialValue: currentEnquiry.user.name\n            })(<Input />)}\n          </Form.Item>\n          <Form.Item {...Layout} label=\"User Mobile\">\n            {getFieldDecorator(\"mobile\", {\n              initialValue: currentEnquiry.user.mobile\n            })(<Input />)}\n          </Form.Item>\n          <Form.Item {...Layout} label=\"User Email\">\n            {getFieldDecorator(\"email\", {\n              initialValue: currentEnquiry.user.email\n            })(<Input />)}\n          </Form.Item>\n          <Form.Item {...Layout} label=\"CelebratON Comments\">\n            {getFieldDecorator(\"celebratonComment\", {\n              initialValue: currentEnquiry.celebratonComment\n            })(\n              <TextArea\n                placeholder=\"Add comments gathered from the verification call\"\n                autosize\n              />\n            )}\n            <div style={{ margin: \"24px 0\" }} />\n          </Form.Item>\n\n          <Form.Item label=\"Verified\" {...Layout}>\n            {getFieldDecorator(\"isVerified\", {\n              initialValue: currentEnquiry.isVerified\n            })(\n              <Radio.Group buttonStyle=\"solid\">\n                <Radio.Button value={true}>Verified</Radio.Button>\n                <Radio.Button value={false}>Not Verified</Radio.Button>\n              </Radio.Group>\n            )}\n          </Form.Item>\n          <Form.Item label=\"Mail Notification\" {...Layout}>\n            {getFieldDecorator(\"sendNotification\", {\n              initialValue: true\n            })(\n              <Radio.Group buttonStyle=\"solid\">\n                <Radio.Button value={true}>Send</Radio.Button>\n                <Radio.Button value={false}>Dont send</Radio.Button>\n              </Radio.Group>\n            )}\n          </Form.Item>\n          <Form.Item label=\"Source\" {...Layout}>\n            {getFieldDecorator(\"source\")(\n              <Radio.Group\n                onChange={this.handleFormLayoutChange}\n                buttonStyle=\"\"\n              >\n                <Radio value=\"Website\">Website</Radio>\n                <Radio value=\"Call\">Call</Radio>\n                <Radio value=\"Chat\">Chat</Radio>\n                <Radio value=\"Other\">Other</Radio>\n              </Radio.Group>\n            )}\n          </Form.Item>\n          <div style={{ textAlign: \"center\" }}>\n            <Form.Item {...tailformItemLayout}>\n              <Button type=\"primary\" htmlType=\"submit\" size=\"large\">\n                Create/Update Enquiry\n              </Button>\n            </Form.Item>\n          </div>\n        </Form>\n\n        <div style={{ background: \"#ECECEC\", padding: \"30px\" }}>\n          <h1 style={{ textAlign: \"center\" }}>All Enquiries</h1>\n          <List\n            className=\"demo-loadmore-list\"\n            loading={initLoading}\n            itemLayout=\"horizontal\"\n            loadMore={loadMore}\n            dataSource={enquiries}\n            grid={{\n              gutter: 16,\n              xs: 1,\n              sm: 2,\n              md: 3,\n              lg: 3,\n              xl: 3,\n              xxl: 3\n            }}\n            style={{ padding: \"10px\" }}\n            renderItem={enquiry => (\n              <List.Item onClick={() => this.openEnquiry(enquiry._id)}>\n                <Skeleton avatar title={false} loading={enquiry.loading} active>\n                  <Card\n                    hoverable\n                    title={enquiry.category}\n                    bordered={false}\n                    style={{\n                      height: \"180px\",\n                      background: enquiry.isVerified ? null : null\n                    }}\n                  >\n                    For <b>{enquiry.serviceFor}</b> <br />\n                    on <b>{moment(enquiry.eventDate).format(\"DD MMM, YYYY\")}</b>\n                    <br />\n                    Bought by: <b>{enquiry.interestedPartners.length}/5</b>{\" \"}\n                    vendors\n                    <Meta\n                      description={\n                        \"Posted: \" +\n                        moment(enquiry.createdAt).from(moment(Date.now()))\n                      }\n                      style={{\n                        paddingTop: \"10px\",\n                        textAlign: \"right\",\n                        position: \"relative\"\n                      }}\n                    />\n                  </Card>\n                </Skeleton>\n              </List.Item>\n            )}\n          />\n\n          <style jsx>{`\n            a {\n              text-decoration: none;\n            }\n          `}</style>\n        </div>\n      </React.Fragment>\n    );\n  }\n}\n\nconst ManageEnquiries = Form.create({ name: \"enquiryFormAdmin\" })(\n  ManageEnquiriesAdmin\n);\n\nexport default withRouter(ManageEnquiries);\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AAqBA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAJA;AAMA;AACA;AACA;AACA;AApBA;AACA;AA4DA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AACA;AAGA;AACA;AACA;AAAA;AAEA;AACA;AAFA;AAKA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAHA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAXA;AAaA;AAEA;AAAA;AAFA;AAKA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AAAA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AADA;AAGA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;;;;;;AA9JA;;;AAwBA;AAAA;AACA;AAAA;AAEA;AAAA;AACA;AAEA;AACA;AAFA;AADA;AAOA;AAEA;AAAA;AACA;AAEA;AACA;AAFA;AADA;AAMA;;;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AAEA;AAEA;AACA;AAAA;AAAA;AADA;AAGA;;;AAkGA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAaA;AAGA;AACA;AACA;AACA;AACA;AAJA;AADA;AAQA;AAAA;AAvBA;AA6BA;AAEA;AAAA;AAAA;AACA;AAEA;AAAA;AAAA;AAAA;AAlCA;AAqCA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAFA;AAIA;AACA;AACA;AACA;AACA;AAFA;AADA;AADA;AAQA;AACA;AAAA;AAAA;AAAA;AADA;AAIA;AArDA;AAAA;AAwDA;AACA;AAAA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAEA;AADA;AAGA;AAAA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AAJA;AADA;AAcA;AADA;AAKA;AADA;AAIA;AACA;AAFA;AAIA;AACA;AAAA;AAAA;AADA;AAQA;AAAA;AAGA;AACA;AAFA;AAMA;AAAA;AAEA;AADA;AAKA;AAAA;AAEA;AAAA;AAEA;AADA;AAGA;AAAA;AAAA;AAAA;AAEA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAJA;AAMA;AAAA;AAPA;AAgBA;AAAA;AAEA;AADA;AAGA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AADA;AAUA;AAFA;AAMA;AAAA;AAGA;AACA;AAFA;AAIA;AACA;AAAA;AAAA;AADA;AAsBA;AACA;AAHA;AAMA;AACA;AAFA;AAIA;AAAA;AAAA;AAAA;AAEA;AAAA;AAKA;AAAA;AAGA;AACA;AAFA;AAKA;AAAA;AAAA;AAAA;AAEA;AAAA;AAEA;AADA;AAIA;AAAA;AAEA;AADA;AAIA;AAAA;AAEA;AADA;AAIA;AAAA;AAEA;AADA;AAIA;AACA;AAFA;AAKA;AAAA;AAAA;AAAA;AAGA;AAAA;AAEA;AADA;AAGA;AAAA;AACA;AAAA;AACA;AAAA;AAIA;AAAA;AAEA;AADA;AAGA;AAAA;AACA;AAAA;AACA;AAAA;AAIA;AAAA;AAGA;AACA;AAFA;AAIA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAIA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AASA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAFA;AAJA;AASA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAGA;AAIA;AACA;AACA;AACA;AAHA;AALA;AAjBA;AAhBA;AAFA;AAAA;AAAA;AA4DA;;;;AAzfA;AACA;AADA;AACA;AA2fA;AAAA;AAAA;AAIA;;;;A","sourceRoot":""}