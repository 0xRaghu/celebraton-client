{"version":3,"file":"static/webpack/static/development/pages/dashboard.js.01aea83b89ae3576e4b5.hot-update.js","sources":["webpack:///./components/vendor/createOrUpdateProfile.js"],"sourcesContent":["import React, { Component } from \"react\";\nimport Login from \"../login/login\";\nimport Nav from \"../nav\";\nimport {\n  Row,\n  Col,\n  Card,\n  Form,\n  Input,\n  Button,\n  Checkbox,\n  Select,\n  InputNumber,\n  Upload,\n  Icon\n} from \"antd\";\nimport WrappedNormalLoginForm from \"../contactForm\";\nimport Router from \"next/router\";\nimport { LoginContext } from \"../provider/loginProvider\";\nimport { HomeConsumer } from \"../provider/homeProvider\";\nimport fetch from \"isomorphic-unfetch\";\nimport axios from \"axios\";\nimport { storage } from \"../../firebase\";\nconst { TextArea } = Input;\n\nclass ManageProfile extends Component {\n  static contextType = LoginContext;\n  state = {\n    categories: [],\n    locations: [],\n    budgetBracket: 0,\n    portfolioImages: [],\n    imageUrl: [],\n    artistSelected: false\n  };\n\n  componentDidMount() {\n    axios.get(\"/api/categories/allCategories/7/0\").then(categories => {\n      this.setState({ categories: categories.data });\n    });\n\n    axios\n      .get(\"/api/admin/getLocations\")\n      .then(loc => this.setState({ locations: loc.data[0].locations }));\n    typeof this.props.profile !== \"undefined\"\n      ? this.setState({ imageUrl: this.props.profile.images })\n      : null;\n    typeof this.props.profile !== \"undefined\"\n      ? this.setState({\n          artistSelected: this.props.profile.categories.includes(\"Artist\")\n        })\n      : null;\n  }\n  componentWillMount() {\n    // this.setState({ categories, locations: locations[0].locations });\n  }\n  onChangeBudgetBracket = value => {\n    this.setState({\n      budgetBracket: value\n    });\n  };\n  normFile = e => {\n    const file = e.file;\n    this.setState({ portfolioImages: this.state.portfolioImages.concat(file) });\n  };\n  catChange = name => {\n    if (name === \"Artist\") {\n      this.setState({ artistSelected: !this.state.artistSelected });\n    }\n  };\n  handleSubmit = e => {\n    e.preventDefault();\n    this.props.form.validateFields((err, values) => {\n      if (!err && typeof this.props.profile === \"undefined\") {\n        // console.log(\"Received values of form: \", values);\n        axios.post(\"/api/profiles/addProfile\", values).then(profile => {\n          this.state.portfolioImages.map(image => {\n            const upload = storage\n              .ref(`/vendorImages/${image.name}`)\n              .put(image.originFileObj);\n            upload.on(\n              \"state_changed\",\n              snapshot => {\n                console.log(\"progress\");\n              },\n              error => {\n                console.log(\"error\");\n              },\n              () => {\n                storage\n                  .ref(\"vendorImages\")\n                  .child(image.name)\n                  .getDownloadURL()\n                  .then(url => {\n                    let temp = { original: url, thumbnail: url };\n                    this.setState({\n                      imageUrl: this.state.imageUrl.concat(temp)\n                    });\n                    axios.post(\n                      `/api/profiles/addImages/${profile.data._id}`,\n                      this.state.imageUrl\n                    );\n                  });\n              }\n            );\n          });\n          this.context.updateProfile(profile.data);\n        });\n      }\n      if (!err && typeof this.props.profile !== \"undefined\") {\n        // console.log(\"Received values of form: \", values);\n        axios.post(\"/api/profiles/updateProfile\", values).then(profile => {\n          this.state.portfolioImages.map(image => {\n            const upload = storage\n              .ref(`/vendorImages/${image.name}`)\n              .put(image.originFileObj);\n            upload.on(\n              \"state_changed\",\n              snapshot => {\n                console.log(\"progress\");\n              },\n              error => {\n                console.log(\"error\");\n              },\n              () => {\n                storage\n                  .ref(\"vendorImages\")\n                  .child(image.name)\n                  .getDownloadURL()\n                  .then(url => {\n                    let temp = { original: url, thumbnail: url };\n                    this.setState({\n                      imageUrl: this.state.imageUrl.concat(temp)\n                    });\n                    axios.post(\n                      `/api/profiles/addImages/${profile.data._id}`,\n                      this.state.imageUrl\n                    );\n                  });\n              }\n            );\n          });\n          this.context.updateProfile(profile.data);\n        });\n      }\n    });\n  };\n  render() {\n    const { getFieldDecorator } = this.props.form;\n\n    const formItemLayoutHorizontal = {\n      labelCol: { span: 6 },\n      wrapperCol: { span: 16 }\n    };\n    const tailformItemLayout = {\n      wrapperCol: {\n        xs: {\n          span: 24,\n          offset: 0\n        }\n      }\n    };\n    const formItemLayoutVertical = {\n      wrapperCol: { span: 22, offset: 1 }\n    };\n    let Layout, layoutVariable;\n    if (typeof screen !== \"undefined\") {\n      Layout =\n        screen.width <= \"850\"\n          ? formItemLayoutVertical\n          : formItemLayoutHorizontal;\n      layoutVariable = screen.width <= \"850\" ? \"vertical\" : \"horizontal\";\n    } else {\n      Layout = formItemLayoutHorizontal;\n      layoutVariable = \"horizontal\";\n    }\n    const { categories, locations } = this.state;\n    const { profile } = this.props;\n\n    return (\n      <React.Fragment>\n        <h1 style={{ textAlign: \"center\" }}>Create or Update Profile</h1>\n        <Form onSubmit={this.handleSubmit} layout={layoutVariable}>\n          <Form.Item {...Layout} label=\"Company Name\">\n            {getFieldDecorator(\n              \"companyName\",\n              {\n                initialValue:\n                  typeof profile !== \"undefined\" ? profile.companyName : \"\"\n              },\n              {\n                rules: [\n                  {\n                    required: true,\n                    message: \"Please enter your Company Name!\"\n                  }\n                ]\n              }\n            )(<Input placeholder=\"Business Name\" />)}\n          </Form.Item>\n          <Form.Item {...Layout} label=\"Description\">\n            {getFieldDecorator(\n              \"description\",\n              {\n                initialValue:\n                  typeof profile !== \"undefined\" ? profile.description : \"\"\n              },\n              {\n                rules: [\n                  {\n                    required: true,\n                    message: \"Please enter your Company Description!\"\n                  }\n                ]\n              }\n            )(\n              <TextArea\n                placeholder=\"Provide details about your business\"\n                autosize\n              />\n            )}\n            <div style={{ margin: \"24px 0\" }} />\n          </Form.Item>\n          <Form.Item {...Layout} label=\"Choose Categories\">\n            {getFieldDecorator(\n              \"categories\",\n              {\n                initialValue:\n                  typeof profile !== \"undefined\" ? profile.categories : null\n              },\n              {\n                rules: [\n                  {\n                    required: true,\n                    message:\n                      \"Please select atleast one Cateogory that you serve!\"\n                  }\n                ]\n              }\n            )(\n              <Checkbox.Group style={{ width: \"100%\" }}>\n                <Row>\n                  {categories.map(category => (\n                    <Col\n                      lg={{ span: 6 }}\n                      md={{ span: 8 }}\n                      sm={{ span: 24 }}\n                      key={category.name}\n                    >\n                      <Checkbox\n                        value={category.name}\n                        onChange={() => this.catChange(category.name)}\n                      >\n                        {category.name}\n                      </Checkbox>\n                    </Col>\n                  ))}\n                </Row>\n              </Checkbox.Group>\n            )}\n          </Form.Item>\n\n          <Form.Item {...Layout} label=\"Choose Locations\">\n            {getFieldDecorator(\n              \"locations\",\n              {\n                initialValue:\n                  typeof profile !== \"undefined\" ? profile.locations : null\n              },\n              {\n                rules: [\n                  {\n                    required: true,\n                    message:\n                      \"Please select atleast one Location that you serve in!\"\n                  }\n                ]\n              }\n            )(\n              <Checkbox.Group style={{ width: \"100%\" }}>\n                <Row>\n                  {locations.map(location => (\n                    <Col\n                      lg={{ span: 6 }}\n                      md={{ span: 8 }}\n                      sm={{ span: 24 }}\n                      key={location}\n                    >\n                      <Checkbox value={location}>{location}</Checkbox>\n                    </Col>\n                  ))}\n                </Row>\n              </Checkbox.Group>\n            )}\n          </Form.Item>\n          <Form.Item {...Layout} label=\"Choose Primary Location\">\n            {getFieldDecorator(\"primaryLocation\", {\n              initialValue:\n                typeof profile !== \"undefined\"\n                  ? profile.primaryLocation\n                    ? profile.primaryLocation\n                    : \"Chennai\"\n                  : \"Chennai\"\n            })(\n              <Select size=\"large\" style={{ width: 180 }}>\n                {locations.map(location => (\n                  <Option key={location}>{location}</Option>\n                ))}\n              </Select>\n            )}\n          </Form.Item>\n          <Form.Item {...Layout} label=\"Minimum Budget\">\n            {getFieldDecorator(\n              \"budgetBracket\",\n              {\n                initialValue:\n                  typeof profile !== \"undefined\" ? profile.budgetBracket : \"\"\n              },\n              {\n                value:\n                  typeof this.state.budgetBracket === \"number\"\n                    ? this.state.budgetBracket\n                    : 0\n              }\n            )(<InputNumber onChange={this.onChangeBudgetBracket} />)}\n          </Form.Item>\n          <Form.Item {...Layout} label=\"Experience\">\n            {getFieldDecorator(\"experience\", {\n              initialValue:\n                typeof profile !== \"undefined\" ? profile.experience : \"\"\n            })(<Input placeholder=\"Experience in the events industry\" />)}\n          </Form.Item>\n          <Form.Item {...Layout} label=\"Events Covered\">\n            {getFieldDecorator(\"eventsCovered\", {\n              initialValue:\n                typeof profile !== \"undefined\" ? profile.eventsCovered : \"\"\n            })(<Input placeholder=\"Enter number of events covered till now\" />)}\n          </Form.Item>\n          <Form.Item {...Layout} label=\"Cancellation Policy\">\n            {getFieldDecorator(\"cancellationPolicy\", {\n              initialValue:\n                typeof profile !== \"undefined\" ? profile.cancellationPolicy : \"\"\n            })(<TextArea placeholder=\"Cancellation Policy if any\" autosize />)}\n            <div style={{ margin: \"24px 0\" }} />\n          </Form.Item>\n          <Form.Item {...Layout} label=\"Payment Terms\">\n            {getFieldDecorator(\"paymentTerms\", {\n              initialValue:\n                typeof profile !== \"undefined\" ? profile.paymentTerms : \"\"\n            })(\n              <TextArea\n                placeholder=\"Advance(%), Payment on event date(%), Payment on Delivery(%)\"\n                autosize\n              />\n            )}\n            <div style={{ margin: \"24px 0\" }} />\n          </Form.Item>\n          {this.state.artistSelected ? (\n            <React.Fragment>\n              <Form.Item {...Layout} label=\"Artist Genre\">\n                {getFieldDecorator(\"artistGenre\", {\n                  initialValue: profile.artistGenre\n                })(<Input />)}\n              </Form.Item>\n              <Form.Item {...Layout} label=\"Languages Known\">\n                {getFieldDecorator(\"languagesKnown\", {\n                  initialValue: profile.languagesKnown\n                })(<Input />)}\n              </Form.Item>\n              <Form.Item {...Layout} label=\"Troupe Size (Performing)\">\n                {getFieldDecorator(\"troupeSizeP\", {\n                  initialValue: profile.troupeSizeP\n                })(<Input />)}\n              </Form.Item>\n              <Form.Item {...Layout} label=\"Troupe Size (Non-Performing)\">\n                {getFieldDecorator(\"troupeSizeNP\", {\n                  initialValue: profile.troupeSizeNP\n                })(<Input />)}\n              </Form.Item>\n              <Form.Item {...Layout} label=\"Performance Duration\">\n                {getFieldDecorator(\"performanceDuration\", {\n                  initialValue: profile.performanceDuration\n                })(<Input />)}\n              </Form.Item>\n              <Form.Item {...Layout} label=\"Event Preference\">\n                {getFieldDecorator(\"eventPreference\", {\n                  initialValue: profile.eventPreference\n                })(<Input />)}\n              </Form.Item>\n              <Form.Item {...Layout} label=\"Managed By\">\n                {getFieldDecorator(\"managedBy\", {\n                  initialValue: profile.managedBy\n                })(<Input />)}\n              </Form.Item>\n\n              <Form.Item {...Layout} label=\"Manager Name\">\n                {getFieldDecorator(\"managerName\", {\n                  initialValue: profile.managerName\n                })(<Input />)}\n              </Form.Item>\n              <Form.Item {...Layout} label=\"Manager Mobile\">\n                {getFieldDecorator(\"managerNumber\", {\n                  initialValue: profile.managerNumber\n                })(<Input />)}\n              </Form.Item>\n              <Form.Item {...Layout} label=\"Manager Email\">\n                {getFieldDecorator(\"managerMail\", {\n                  initialValue: profile.managerMail\n                })(<Input />)}\n              </Form.Item>\n            </React.Fragment>\n          ) : null}\n          <Form.Item\n            {...Layout}\n            label=\"Portfolio Images\"\n            extra=\"Our customers will get a fair idea about your quality and design\"\n          >\n            {getFieldDecorator(\"images\", {\n              valuePropName: \"fileList\",\n              getValueFromEvent: this.normFile\n            })(\n              <Upload name=\"logo\" listType=\"picture\" multiple={true}>\n                <Button>\n                  <Icon type=\"upload\" /> Click to upload\n                </Button>\n              </Upload>\n            )}\n          </Form.Item>\n          <Form.Item {...Layout} label=\"Youtube videos\">\n            {getFieldDecorator(\n              \"videos\",\n              {\n                initialValue:\n                  typeof profile !== \"undefined\" ? profile.videos.join(\",\") : \"\"\n              },\n              {}\n            )(\n              <TextArea\n                placeholder={`Provide youtube urls seperated by comma ${\"\\n\"}ex., https://www.youtube.com/watch?v=7GBCHRxq3Sc,https://www.youtube.com/watch?v=VRdaHFy0FcY`}\n              />\n            )}\n          </Form.Item>\n          <div style={{ textAlign: \"center\" }}>\n            <Form.Item {...tailformItemLayout}>\n              <Button type=\"primary\" htmlType=\"submit\">\n                {typeof profile !== \"undefined\"\n                  ? \"Update Profile\"\n                  : \"Create Profile\"}\n              </Button>\n            </Form.Item>\n          </div>\n        </Form>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default Form.create({ name: \"manage-profile\" })(ManageProfile);\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AAaA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AACA;AA4BA;AACA;AACA;AADA;AAGA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAGA;AAGA;AACA;AAEA;AACA;AAEA;AAKA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AADA;AACA;AAEA;AAIA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAGA;AAGA;AACA;AAEA;AACA;AAEA;AAKA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AADA;AACA;AAEA;AAIA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;;;;;;AA/GA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAEA;AAEA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAEA;AAEA;AADA;AAIA;;;AACA;AAEA;;;AA4FA;AAAA;AACA;AADA;AAGA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAFA;AAIA;AACA;AACA;AACA;AACA;AAFA;AADA;AADA;AAQA;AACA;AAAA;AAAA;AAAA;AADA;AAGA;AACA;AAAA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AA7BA;AAAA;AAAA;AAAA;AAgoBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AADA;AAKA;AAEA;AACA;AAFA;AAFA;AAUA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAPA;AAcaA;AACA;AADA;AACA;AA+aA;AAAA;AAAA;;;;A","sourceRoot":""}